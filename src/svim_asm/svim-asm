#!/usr/bin/env python3

__version__ = '0.1.0'
__author__ = 'David Heller'

import sys
import os
import re
import pickle
import gzip
import logging
import pysam

from time import strftime, localtime

from svim_asm.SVIM_input_parsing import parse_arguments
from svim_asm.SVIM_COLLECT import analyze_alignment_file_coordsorted
from svim_asm.SVIM_COMBINE import write_final_vcf
from svim_asm.SVIM_plot import plot_sv_lengths


def main():
    # Fetch command-line options
    options = parse_arguments(program_version=__version__)

    if not options.sub:
        print("Please choose one of the two modes ('alignment'). See --help for more information.")
        return

    # Set up logging
    logFormatter = logging.Formatter("%(asctime)s [%(levelname)-7.7s]  %(message)s")
    rootLogger = logging.getLogger()
    rootLogger.setLevel(logging.INFO)

    # Create working dir if it does not exist
    if not os.path.exists(options.working_dir):
        os.makedirs(options.working_dir)

    # Create log file
    fileHandler = logging.FileHandler("{0}/SVIM_{1}.log".format(options.working_dir, strftime("%y%m%d_%H%M%S", localtime())), mode="w")
    fileHandler.setFormatter(logFormatter)
    rootLogger.addHandler(fileHandler)

    consoleHandler = logging.StreamHandler()
    consoleHandler.setFormatter(logFormatter)
    rootLogger.addHandler(consoleHandler)

    logging.info("****************** Start SVIM-asm, version {0} ******************".format(__version__))
    logging.info("CMD: python3 {0}".format(" ".join(sys.argv)))
    logging.info("WORKING DIR: {0}".format(os.path.abspath(options.working_dir)))
    for arg in vars(options):
        logging.info("PARAMETER: {0}, VALUE: {1}".format(arg, getattr(options, arg)))

    logging.info("****************** STEP 1: COLLECT ******************")
    
    if options.sub == 'alignment':
        logging.info("MODE: alignment")
        logging.info("INPUT: {0}".format(os.path.abspath(options.bam_file)))
        aln_file = pysam.AlignmentFile(options.bam_file)
        try:
            if aln_file.header["HD"]["SO"] == "coordinate":
                sv_candidates = analyze_alignment_file_coordsorted(aln_file, options)
            else:
                logging.error("Input BAM file needs to be coordinate-sorted. Exiting..")
                return
        except KeyError:
            logging.error("Is the given input BAM file coordinate-sorted? It does not contain a sorting order in its header line.")
            return

    deletion_candidates = [cand for cand in sv_candidates if cand.type == "DEL"]
    insertion_candidates = [cand for cand in sv_candidates if cand.type == "INS"]
    inversion_candidates = [cand for cand in sv_candidates if cand.type == "INV"]
    tandem_duplication_candidates = [cand for cand in sv_candidates if cand.type == "DUP_TAN"]
    breakend_candidates = [cand for cand in sv_candidates if cand.type == "BND"]
    interspersed_duplication_candidates = [cand for cand in sv_candidates if cand.type == "DUP_INT"]

    logging.info("Found {0} deletion candidates.".format(len(deletion_candidates)))
    logging.info("Found {0} insertion candidates.".format(len(insertion_candidates)))
    logging.info("Found {0} inversion candidates.".format(len(inversion_candidates)))
    logging.info("Found {0} tandem duplication candidates.".format(len(tandem_duplication_candidates)))
    logging.info("Found {0} breakend candidates.".format(len(breakend_candidates)))
    logging.info("Found {0} interspersed duplication candidates.".format(len(interspersed_duplication_candidates)))
    
    logging.info("****************** STEP 2: OUTPUT ******************")
    # Write SV candidates
    logging.info("Write SV candidates..")
    types_to_output = [entry.strip() for entry in options.types.split(",")]
    write_final_vcf(interspersed_duplication_candidates,
                    inversion_candidates,
                    tandem_duplication_candidates,
                    deletion_candidates,
                    insertion_candidates,
                    breakend_candidates,
                    __version__,
                    aln_file.references,
                    aln_file.lengths,
                    types_to_output,
                    options)
    logging.info("Draw plots..")
    plot_sv_lengths(deletion_candidates, inversion_candidates, interspersed_duplication_candidates, tandem_duplication_candidates, insertion_candidates, options)
    logging.info("Done.")

if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        logging.error(e, exc_info=True)